{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template for deploying hubot on AWS free tier",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "hubot",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation": {
      "Description": "IP Address allowed to SSH into the BotServer",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "5.148.56.74/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
    }
  },


  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "eu-west-1"        : {"HVM64" : "ami-f95ef58a"}
    }

  },

  "Resources" : {

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata" : {
        "Comment1" : "Configure the Load Balancer with cookie-based stickiness"
      },
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone" : "true",
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ 
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP",
            "PolicyNames" : [ "CookieBasedPolicy" ]
          }
        ]
      }
    },

    "BotServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : "1",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "0",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "aws_bootstrap" : ["install_cfn", "install_codedeploy", "install_bot_dependancies"]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets aws_bootstrap ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_codedeploy" : {
            "commands" : {
              "01_install_git" : {
                "command" : "curl -sSL https://raw.githubusercontent.com/tomharvey/bootstraps/master/codedeploy-agent-install.sh | bash"
                }
            }

          },
          "install_bot_dependancies" : {
            "commands" : {
              "01_setup_node" : {
                "command" : "curl -sL https://deb.nodesource.com/setup | bash -"
              },
              "02_install_packages" : {
                "command": "apt-get install -y nginx nodejs redis-server"
              },
              "03_remove_default_site" : {
                "command": "rm /etc/nginx/sites-enabled/default"
              },
              "04_create_dirs" : {
                "command": "mkdir -p /{srv,etc}/myhubot"
              }
            }
          }

        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "BotServerSecurityGroup"} ],
        "IamInstanceProfile" : {"Ref" : "BotInstanceIAM"},
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "curl -sSL https://raw.githubusercontent.com/tomharvey/bootstraps/master/cfn-bootstrap-install.sh | bash\n",

                       "/usr/local/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets aws_bootstrap ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/usr/local/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource BotServerGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "BotInstanceIAM" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "DependsOn" : "CDInstanceRole",
      "Properties" : {
        "Path" : { "Fn::Join" : ["", ["/", { "Ref" : "AWS::StackName" }, "-CDInstance/"]]},
        "Roles" : [{"Ref" : "CDInstanceRole"}]
      }
    },

    "CDInstanceRole" : { 
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "s3.amazonaws.com",
                    "ec2.amazonaws.com",
                    "codedeploy.amazonaws.com"
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Path" : { "Fn::Join" : ["", ["/", { "Ref" : "AWS::StackName" }, "-CodeDeployInstanceRole/"]]}
       }
    },

    "BotServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80", 
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "SSHLocation"}
          }
        ]
      }
    },

    "BotApp" : {
      "Type" : "AWS::CodeDeploy::Application",
      "Properties" : {
        "ApplicationName" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "-application"]]}
      }
    },

    "BotDeployGroup" : {
      "Type" : "AWS::CodeDeploy::DeploymentGroup",
      "Properties" : {
        "ApplicationName" : { "Ref" : "BotApp" },
        "AutoScalingGroups" : [ {"Ref" : "BotServerGroup"} ],
        "ServiceRoleArn" : {"Fn::GetAtt" : ["AWSDeploymentServiceRole", "Arn"] }
      },
      "DependsOn" : ["BotApp", "BotServerGroup", "AWSDeploymentServiceRole"]
    },

    "AWSDeploymentServiceRole" : { 
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "codedeploy.amazonaws.com"
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"],
          "Path" : { "Fn::Join" : ["", ["/", { "Ref" : "AWS::StackName" }, "-DeploymentService/"]]}
       }
    },

    "BotReleaseCache" : {
      "Type" : "AWS::S3::Bucket"
    },

    "CDSUser" : {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": { "Fn::Join" : ["", ["/", { "Ref" : "AWS::StackName" }, "-ContinuousDeploymentServiceUser/"]]}
      }
    },
    "CDSAccessKey" : {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref" : "CDSUser"}
      },
      "DependsOn" : ["CDSUser"]
    },

    "PermissionToGetCodeDeployAgent" : {
      "Type" : "AWS::IAM::Policy",
      "DependsOn" : [ "CDInstanceRole" ],
      "Properties" : {
        "PolicyName" : "CodeDeployAgentGet",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:s3:::aws-codedeploy-eu-west-1/latest/install"
              ]
            }
          ]
        },
        "Roles" : [ { "Ref" : "CDInstanceRole" } ]
      }
    },

    "PermissionToPutReleaseCache" : {
      "Type" : "AWS::IAM::Policy",
      "DependsOn" : [ "CDSUser" ],
      "Properties" : {
        "PolicyName" : "ReleaseCachePut",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BotReleaseCache" },"/*"]]}
              ]
            }
          ]
        },
        "Users" : [ { "Ref" : "CDSUser" } ]
      }
    },

    "PermissionToGetReleaseCache" : {
      "Type" : "AWS::IAM::Policy",
      "DependsOn" : [ "CDInstanceRole" ],
      "Properties" : {
        "PolicyName" : "ReleaseCacheGet",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BotReleaseCache" },"/*"]]}
              ]
            }
          ]
        },
        "Roles" : [ { "Ref" : "CDInstanceRole" } ]
      }
    },

    "PermissionToDeployCode" : {
      "Type" : "AWS::IAM::Policy",
      "DependsOn" : [ "CDSUser" ],
      "Properties" : {
        "PolicyName" : "CodeDeploy",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:codedeploy:", { "Ref" : "AWS::Region"}, ":", { "Ref" : "AWS::AccountId"}, ":application:", { "Ref" : "BotApp" }]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:codedeploy:", { "Ref" : "AWS::Region"}, ":", { "Ref" : "AWS::AccountId"}, ":deploymentgroup:", { "Ref" : "BotApp" }, "/*"]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:codedeploy:", { "Ref" : "AWS::Region"}, ":", { "Ref" : "AWS::AccountId"}, ":deploymentconfig:CodeDeployDefault.OneAtATime"]]},
                {"Fn::Join" : ["", ["arn:aws:codedeploy:", { "Ref" : "AWS::Region"}, ":", { "Ref" : "AWS::AccountId"}, ":deploymentconfig:CodeDeployDefault.HalfAtATime"]]},
                {"Fn::Join" : ["", ["arn:aws:codedeploy:", { "Ref" : "AWS::Region"}, ":", { "Ref" : "AWS::AccountId"}, ":deploymentconfig:CodeDeployDefault.AllAtOnce"]]}
              ]
            }
          ]},
        "Users" : [ { "Ref" : "CDSUser" } ]
      }
    }

  },

  "Outputs" : {
    "BotURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]},
      "Description" : "Bot Server Address"
    },
    "ApplicationName" : {
      "Value" : { "Ref" : "BotApp" },
      "Description" : "Bot Application Name"
    },
    "DeploymentGroupName" : {
      "Value" : { "Ref" : "BotDeployGroup" },
      "Description" : "Bot Deployment Group Name"
    },
    "CDAccessKeyId" : {
      "Value" : {"Ref" : "CDSAccessKey"},
      "Description" : "Continuous Deployment Service Access Key ID"
    },
    "CDSecretAccessKey" : {
      "Value" : {"Fn::GetAtt" : ["CDSAccessKey", "SecretAccessKey"]},
      "Description" : "Continuous Deployment Service Secret Access Key"
    },
    "S3ReleaseBucket" : {
      "Value" : {"Ref" : "BotReleaseCache"},
      "Description" : "Bucket used to hold releases"
    }
  }
}
